import tkinter as tk
from tkinter import filedialog
from tkinter import ttk
from tkinter import messagebox
from tkinter import simpledialog
from PIL import Image
import json
import os
from time import sleep
import xml.etree.ElementTree as ET
from assets import *
from igeditor import IGEditor

DOC = '''IGKit v0.0.2
1. Export Image Layers:
    Export Images which can be identified by Import Folder to Layers in PS.
    Use the folder exported by 'Save project with individual images' in IGEditor as its src.
2. Import Image Objects:
    Import pictures to IGEditor.
    Also generate an outline of the imported images.
3. Relocate Buttons:
    Relocate the buttons to the positions shown in PS.
    And also attach the corresponding images to the buttons.
    Read the outline generated by $2.
    Should use annotions in BOG caption. They should consist with the slice names in PS.
4. Relocate Hidden Buttons:
    Relocate the hidden buttons homogeneously to avoid overlaping.
5. Guide Lines:
    Connect the guiding lines.
    Annotated in BOG caption.
    Format: #row,column[,rowspan[,columspan[,start|end_flag]]][#comment]
    The # sign enables the feature.
    start|end_flag: choose in S, E, or just omit it.
'''

class App:

    def __init__(self):
        self.ui = tk.Tk()
        self.ui.title('IGKit')

        self.init()

        self.ui.mainloop()

    def init(self):
        ttk.Button(self.ui, text='Export Image Layers', width=25, command=self.btn2Layer) \
            .pack(fill='x', side='top', padx=16, pady=(16, 8))
        ttk.Button(self.ui, text='Import Image Objects', width=25, command=self.importImage) \
            .pack(fill='x', side='top', padx=16, pady=8)
        ttk.Button(self.ui, text='Relocate Buttons', width=25, command=self.fitButton) \
            .pack(fill='x', side='top', padx=16, pady=8)
        ttk.Button(self.ui, text='Relocate Hidden Buttons', width=25, command=self.homogenicHidden) \
            .pack(fill='x', side='top', padx=16, pady=8)
        ttk.Button(self.ui, text='Guide Lines', width=25, command=self.guideLines) \
            .pack(fill='x', side='top', padx=16, pady=8)
        ttk.Button(self.ui, text='Help', width=25, command=self.help) \
            .pack(fill='x', side='top', padx=16, pady=(8, 16))

    def btn2Layer(self):
        folder = filedialog.askdirectory(title='Open folder with individual images', mustexist=True)
        if folder:
            self.btn2LayerAction(folder)
    def btn2LayerAction(self, folder):
        projectPath = os.path.join(folder, 'project.xml')
        assert(os.path.exists(projectPath))
        tree = ET.parse(projectPath)
        root = tree.getroot()
        interactive = Interactive(root.find('DisplaySets/IesDisplaySet/Interactive'))

        for state in ['N.png', 'S.png', 'A.png']:
            for page in interactive.pages:
                canvases:list[Image.Image] = []
                for bog in page.bogs:
                    for i, button in enumerate(bog.buttons):

                        if i >= len(canvases):
                            canvas = Image.new('RGBA', (interactive.width, interactive.height), color=(0, 0, 0, 0))
                            canvases.append(canvas)

                        states = []
                        buttonID = button.getObjectID(state[0])
                        if buttonID == 65535:
                            continue
                        states = self.getStates(buttonID, interactive)

                        for s in states:
                            imagePath = os.path.join(folder, '_'.join(s))
                            if os.path.exists(imagePath):
                                image = Image.open(imagePath)
                                canvases[i].paste(image, (button.x, button.y))
                                break
                for i, canvas in enumerate(canvases):
                    tmp = [page.caption, str(i), state]
                    imagePath = os.path.join(folder, '_'.join(tmp))
                    canvas.save(imagePath)
        messagebox.showinfo(message='Success!')

    def importImage(self):
        folder = filedialog.askdirectory(title='Open folder with individual images', mustexist=True)
        if folder:
            self.importImageAction(folder)
    def importImageAction(self, folder):
        objects:list[str] = []
        for head, _, tails in os.walk(folder):
            for tail in tails:
                if tail.endswith('.png'):
                    path = os.path.join(head, tail)
                    path = path.replace('/', '\\')
                    objects.append(path)

        igEditor = IGEditor()
        for obj in objects:
            igEditor.addObject()
            igEditor.importObject(obj)
        sleep(3)
        with open('objects.json', 'w', encoding='UTF-8') as f:
            json.dump(objects, f, indent=4)

        messagebox.showinfo(message='Success!')

    def fitButton(self):
        designerPath = filedialog.askopenfilename(title='Open Scenarist Designer File', 
                                                  filetypes=[('Scenarist Designer File', '*.designer')])
        dliesPath = filedialog.askopenfilename(title='Open IGEditor Dlies Project File',
                                               filetypes=[('IGEditor Dlies File', '*.dlies')])
        if designerPath and dliesPath:
            startID = None
            if os.path.exists('objects.json'):
                startID = simpledialog.askinteger('', prompt='Please enter the ID of the first appended object: ')
            self.fitButtonAction(designerPath, dliesPath, startID)
    def fitButtonAction(self, designerPath:str, dliesPath:str, startID:Optional[int]):
        def formatPath(head:str, tail:str):
            path = os.path.join(head, tail)
            return path.replace('/', '\\')

        designerTree = ET.parse(designerPath)
        designerRoot = designerTree.getroot()
        designerPage = designerRoot.find('InteractiveGraphic/DisplaySet/Page')
        dliesTree = ET.parse(dliesPath)
        dliesRoot = dliesTree.getroot()
        dliesInteractive = Interactive(dliesRoot.find('DisplaySets/IesDisplaySet/Interactive'))
        if startID != None:
            with open('objects.json', encoding='UTF-8') as f:
                objectIDs:list = json.load(f)

        for page in dliesInteractive.pages:                
            for bog in page.bogs:
                dBog = designerPage.find(f"ButtonOverlapGroup[@name='{bog.caption}']")
                if dBog != None:
                    for i in range(len(bog.buttons)):
                        n = dBog[i].find('Normal/Graphic')
                        s = dBog[i].find('Selected/Graphic')
                        a = dBog[i].find('Active/Graphic')
                        for state in [n, s, a]:
                            try:
                                bog.buttons[i].x = state.attrib['x']
                                bog.buttons[i].y = state.attrib['y']
                                break
                            except:
                                continue
                        else:
                            print('Error: Position.')
                        if startID != None:
                            try:
                                path = formatPath(os.path.dirname(designerPath), n.attrib['path'][1:]) 
                                id = objectIDs.index(path) + startID
                                bog.buttons[i].n = id
                                bog.buttons[i].s = id
                                bog.buttons[i].a = id
                            except:
                                print('Error: Normal Object ID.')
                            try:
                                path = formatPath(os.path.dirname(designerPath), s.attrib['path'][1:]) 
                                id = objectIDs.index(path) + startID
                                bog.buttons[i].s = id
                                bog.buttons[i].a = id
                            except:
                                print('Error: Selected Object ID.')
                            try:
                                path = formatPath(os.path.dirname(designerPath), a.attrib['path'][1:]) 
                                id = objectIDs.index(path) + startID
                                bog.buttons[i].a = id
                            except:
                                print('Error: Active Object ID.')

        dliesPath = '.'.join(dliesPath.split('.')[:-1]) + '_new.dlies'
        dliesTree.write(dliesPath, encoding='UTF-8', xml_declaration=True)
        self.normalizeDlies(dliesPath)
        if os.path.exists('objects.json'):
            os.remove('objects.json')

        messagebox.showinfo(message='Success!')

    def guideLines(self):
        dliesPath = filedialog.askopenfilename(title='Open IGEditor Dlies Project File',
                                               filetypes=[('IGEditor Dlies File', '*.dlies')])
        if dliesPath:
            self.guideLinesAction(dliesPath)
    def guideLinesAction(self, dliesPath):
        def parseGrid(rule:str):
            '''#row,column[,rowspan[,columspan[,start|end_flag]]][#comment]'''
            rules = rule.split('#')[1].split(',')
            flag = len(rules) >= 5 and rules[4].upper()[0] or 'A'
            colspan = len(rules) >= 4 and int(rules[3]) or 1
            rowspan = len(rules) >= 3 and int(rules[2]) or 1
            col = int(rules[1])
            row = int(rules[0])
            return {'row': row, 'col': col, 'rowspan': rowspan, 'colspan': colspan, 'flag': flag}

        dliesTree = ET.parse(dliesPath)
        dliesRoot = dliesTree.getroot()
        dliesInteractive = Interactive(dliesRoot.find('DisplaySets/IesDisplaySet/Interactive'))
        for page in dliesInteractive.pages:
            # get the mesh
            mesh:dict[int, dict] = {}
            for bog in page.bogs:
                if bog.caption.startswith('#'):
                    grid = parseGrid(bog.caption)
                    for button in bog.buttons:
                        mesh[button.id] = grid
            # guide lines
            for bog in page.bogs:
                for button in bog.buttons:
                    if button.id in mesh.keys() and mesh[button.id]['flag'] != 'E':
                        center = mesh[button.id]
                        neighbor:dict[str, int] = {}
                        for id, grid in mesh.items():
                            if id == button.id or grid['flag'] == 'S':
                                continue
                            # get the up
                            if (grid['row'] < center['row'] and
                                grid['col'] < center['col'] + center['colspan'] and
                                grid['col'] + grid['colspan'] > center['col']):
                                if not neighbor.get('up') != None:
                                    neighbor['up'] = id
                                else:
                                    up = mesh[neighbor['up']]
                                    if (grid['row'] + grid['rowspan'] > up['row'] + up['rowspan'] or
                                        (grid['row'] + grid['rowspan'] == up['row'] + up['rowspan'] and grid['col'] < up['col'])):
                                        neighbor['up'] = id
                            # get the down
                            if (grid['row'] > center['row'] and
                                grid['col'] < center['col'] + center['colspan'] and
                                grid['col'] + grid['colspan'] > center['col']):
                                if not neighbor.get('down') != None:
                                    neighbor['down'] = id
                                else:
                                    down = mesh[neighbor['down']]
                                    if (grid['row'] < down['row'] or
                                        (grid['row'] == down['row'] and grid['col'] < down['col'])):
                                        neighbor['down'] = id
                            # get the left
                            if (grid['col'] < center['col'] and
                                grid['row'] < center['row'] + center['rowspan'] and
                                grid['row'] + grid['rowspan'] > center['row']):
                                if not neighbor.get('left') != None:
                                    neighbor['left'] = id
                                else:
                                    left = mesh[neighbor['left']]
                                    if (grid['col'] + grid['colspan'] > left['col'] + left['colspan'] or
                                        (grid['col'] + grid['colspan'] == left['col'] + left['colspan'] and grid['row'] < left['row'])):
                                        neighbor['left'] = id
                            # get the right
                            if (grid['col'] > center['col'] and
                                grid['row'] < center['row'] + center['rowspan'] and
                                grid['row'] + grid['rowspan'] > center['row']):
                                if not neighbor.get('right') != None:
                                    neighbor['right'] = id
                                else:
                                    right = mesh[neighbor['right']]
                                    if (grid['col'] < right['col'] or
                                        (grid['col'] == right['col'] and grid['row'] < right['row'])):
                                        neighbor['right'] = id
                        # apply
                        if neighbor.get('up') != None:
                            button.up = neighbor['up']
                        if neighbor.get('down') != None:
                            button.down = neighbor['down']
                        if neighbor.get('left') != None:
                            button.left = neighbor['left']
                        if neighbor.get('right') != None:
                            button.right = neighbor['right']
        dliesPath = '.'.join(dliesPath.split('.')[:-1]) + '_new.dlies'
        dliesTree.write(dliesPath, encoding='UTF-8', xml_declaration=True)
        self.normalizeDlies(dliesPath)
        messagebox.showinfo(message='Success!')

    def homogenicHidden(self):
        folder = filedialog.askdirectory(title='Open folder with individual images', mustexist=True)
        page = simpledialog.askinteger('', prompt='Please Enter Page ID: ')
        interval = simpledialog.askinteger('', prompt='Please Enter Space Interval (Default is 50px): ', initialvalue=50)
        if folder and page != None and interval != None:
            dliesPath = os.path.join(folder, 'project.xml')
            assert(os.path.exists(dliesPath))
            self.homogenicHiddenAction(dliesPath, int(page), int(interval))
    def homogenicHiddenAction(self, dliesPath:str, pageID:int, interval:int=50):
        lattice = [(x, y) for y in range(0, 1050, interval) for x in range(0, 1900, interval)]
        ind = 0
        folder = os.path.dirname(dliesPath)
        dliesTree = ET.parse(dliesPath)
        dliesRoot = dliesTree.getroot()
        dliesInteractive = Interactive(dliesRoot.find('DisplaySets/IesDisplaySet/Interactive'))

        for page in dliesInteractive.pages:
            if page.id == pageID:
                for bog in page.bogs:
                    for button in bog.buttons:
                        if button.isHidden:
                            button.x, button.y = lattice[ind]
                            bog.caption = '!{:d},{:d}'.format(lattice[ind][0]/interval, lattice[ind][1]/interval)
                            ind += 1
                        else: # the object is transparent.
                            for state in ['N', 'S', 'A']:
                                transparent = False
                                states = []
                                buttonID = button.getObjectID(state)
                                if buttonID == 65535:
                                    continue
                                states = self.getStates(buttonID, dliesInteractive)

                                for s in states:
                                    imagePath = os.path.join(folder, '_'.join(s))
                                    if os.path.exists(imagePath):
                                        image = Image.open(imagePath)
                                        alpha = image.getchannel('A')
                                        colors = alpha.getcolors() # [(count, color)]
                                        if len(colors) == 1 and colors[0][1] == 0:
                                            transparent = True
                                        break
                                if transparent:
                                    continue
                                break
                            else:
                                button.x, button.y = lattice[ind]
                                bog.caption = '!{:d},{:d}'.format(lattice[ind][0]/interval, lattice[ind][1]/interval)
                                button.n = 65535
                                button.s = 65535
                                button.a = 65535
                                ind += 1
        
        dliesPath = '.'.join(dliesPath.split('.')[:-1]) + '_new.dlies'
        dliesTree.write(dliesPath, encoding='UTF-8', xml_declaration=True)
        self.normalizeDlies(dliesPath)
        messagebox.showinfo(message='Success!')

    def getStates(self, buttonID:int, interactive:Interactive):
        states = []
        for page in interactive.pages:
            for bog in page.bogs:
                for button in bog.buttons:
                    if button.n == buttonID:
                        states.append([interactive.caption, page.caption, bog.caption, button.caption, 'N.png'])
                    elif button.s == buttonID:
                        states.append([interactive.caption, page.caption, bog.caption, button.caption, 'S.png'])
                    elif button.a == buttonID:
                        states.append([interactive.caption, page.caption, bog.caption, button.caption, 'A.png'])
        return states

    def normalizeDlies(self, fp:str):
        with open(fp, 'r', encoding='UTF-8', buffering=8192) as f:
            string = f.read()
            string = string.replace('<Caption />', '<Caption></Caption>')
        with open(fp, 'w', encoding='UTF-8') as f:
            f.write(string)

    def help(self):
        messagebox.showinfo(message=DOC, title='Help')
    
if __name__ == '__main__':
    App()